/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MemeIndexRouteImport } from './routes/meme/index'
import { Route as LeaderboardIndexRouteImport } from './routes/leaderboard/index'
import { Route as MemeMemeIdRouteImport } from './routes/meme/$memeId'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MemeIndexRoute = MemeIndexRouteImport.update({
  id: '/meme/',
  path: '/meme/',
  getParentRoute: () => rootRouteImport,
} as any)
const LeaderboardIndexRoute = LeaderboardIndexRouteImport.update({
  id: '/leaderboard/',
  path: '/leaderboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const MemeMemeIdRoute = MemeMemeIdRouteImport.update({
  id: '/meme/$memeId',
  path: '/meme/$memeId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/meme/$memeId': typeof MemeMemeIdRoute
  '/leaderboard': typeof LeaderboardIndexRoute
  '/meme': typeof MemeIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/meme/$memeId': typeof MemeMemeIdRoute
  '/leaderboard': typeof LeaderboardIndexRoute
  '/meme': typeof MemeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/meme/$memeId': typeof MemeMemeIdRoute
  '/leaderboard/': typeof LeaderboardIndexRoute
  '/meme/': typeof MemeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/meme/$memeId' | '/leaderboard' | '/meme'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/meme/$memeId' | '/leaderboard' | '/meme'
  id: '__root__' | '/' | '/about' | '/meme/$memeId' | '/leaderboard/' | '/meme/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  MemeMemeIdRoute: typeof MemeMemeIdRoute
  LeaderboardIndexRoute: typeof LeaderboardIndexRoute
  MemeIndexRoute: typeof MemeIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/meme/': {
      id: '/meme/'
      path: '/meme'
      fullPath: '/meme'
      preLoaderRoute: typeof MemeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leaderboard/': {
      id: '/leaderboard/'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LeaderboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/meme/$memeId': {
      id: '/meme/$memeId'
      path: '/meme/$memeId'
      fullPath: '/meme/$memeId'
      preLoaderRoute: typeof MemeMemeIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  MemeMemeIdRoute: MemeMemeIdRoute,
  LeaderboardIndexRoute: LeaderboardIndexRoute,
  MemeIndexRoute: MemeIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
